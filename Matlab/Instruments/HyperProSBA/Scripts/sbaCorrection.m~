%% Processing Hyperpro-SBA Raw Files to Rrs
% Description: This code takes L2s mat files generated from Pro-Soft,
% computes Rrs from Lw and Ed, and then conducts shadow correction on the
% Rrs. 
%

clear
clc
close all 
%% Set Global Parameters
global G                                    % this one is designed for calculate from the four free variables
global P S bbp440 Y;                        % free variables
%   P: aph(440)
%   S: slope of adg
%   bbp440: bbp(440)
%   Y: slope of particle backscattering
%   G: adg(440)

global PI radius;                           % PI; radius of sensor 
global a0 a1;                               % for calculation of aph
global aw bbw                               % IOPs of pure water
global theta thetaw                         % solar zenith; solar zenith at subsurface
global s1 s2 s3 s4;                         % parameter for shading correction 
global Rrsraw Rrsc;                         % input Rrs; corrected Rrs
global WL WN                                % bands; number of bands

%% Paths 

% FIRST, place Matfile folder from Prosoft into 'Datasets' Folder 

% Customize for your HyperPro Folder
folder = '/Users/kellyluis/PycharmProjects/oceanoptics/Matlab/Instruments/HyperProSBA/';
datasetFolder = [folder 'Datasets/190824_Dock/'];

figureFolder = [folder 'Figures/'];
matfileFolder = dir([datasetFolder '*.mat']);
parameterFolder= [folder 'Functions/SBA_shadowcorr_public/'];  
addpath(genpath(folder)); 

%% Loop through matfiles
for file = 1:length(matfileFolder)
    
    % Load Matfile
    cd(datasetFolder)
    load(matfileFolder(file).name);
    
    % Collect Metadata: Date and Filename
    year = str2double(matfileFolder(file).name(1:4));
    doy = str2double(matfileFolder(file).name(6:8));
    dt(file) = datetime(year,1,doy);
    fname{file} = matfileFolder(file).name(10:15);
    
    % Extract Tilt, Ls, and Es Information
    tiltraw=hdfdata.ABS_TILT_data;
    Lsraw=hdfdata.LS_hyperspectral_data;
    Esraw=hdfdata.ES_hyperspectral_data;
    WL_Ls=str2double(hdfdata.LS_hyperspectral_fields);
    WL_Es=str2double(hdfdata.ES_hyperspectral_fields);

    % Filter out tilt > 5 deg
    temp=find(tiltraw<5);
    Ls_tilt=Lsraw(temp,:);
    Es_tilt=Esraw(temp,:);

    % Interpolate Es to Lw Sacle
    [end1 head1]=size(Ls_tilt);

    head1_1=floor(0.25*end1);
    end1_1=end1-head1_1;

    Lsraw1=Ls_tilt(head1_1:end1_1,:);
    Esraw1=Es_tilt(head1_1:end1_1,:);

    [temp1 temp2]=size(Lsraw1);
    
    for i=1:1:temp1
        Esraw1_0(i,:)=interp1(WL_Es,Esraw1(i,:),WL_Ls);
    end

    % Compute Rrs
    Rrs_tilt=Lsraw1./Esraw1_0;
    Rrs_avg = nanmean(Rrs_tilt,1);
    Rrs_std = nanstd(Rrs_tilt,1);
    
    % Plot Uncorrected 
    figure(1)
    errorbar(WL_Ls, Rrs_avg, Rrs_std);
    hold on
    plot(WL_Ls, Rrs_avg,'LineWidth',3)
    xlabel('Wavelength (nm)')
    ylabel('R_r_s (sr^-^1)')
    title([fname{file}  ': Not Corrected'])
    legend('Mean with Standard Deviation','Median')

    set(gcf,'Color','w')
    export_fig([figureFolder 'rrs_uncorrected_' fname{file}],'-m3','-painters')
    close all
    
    %% Shadow Correction
    
    % Initialize Parameters
    radius=0.05238;                             % radius of sensor, (meter)
    WL=[400:5:750];                             % bands
    [temp WN]=size(WL);                         

    n=1.34;                                     % refraction index of water

    PI=acos(-1.0);
    twopi=2.0*PI;

    % Read pure water IOP
    filename=strcat(parameterFolder,'purewaterIOP.txt') ;
    fidin=fopen(filename);
    tempn=fscanf(fidin,'%f\t',[1 1]); % lines of heading
    for i=1:1:tempn
        temp=fgetl(fidin);
    end
    clear temp

    temp=fscanf(fidin,'%f\t',[3 inf]);

    [temp1 temp2]=size(temp);

    temp=temp';
    aw=interp1(temp(:,1),temp(:,2),WL);
    bbw=0.5*interp1(temp(:,1),temp(:,3),WL);
    fclose(fidin);

    % aph parameter 
    filename=strcat(parameterFolder,'a0a1.txt') ;
    fidin=fopen(filename);
    tempn=fscanf(fidin,'%f\t',[1 1]);   % lines of heading
    for i=1:1:tempn
        temp=fgetl(fidin);
    end
    clear temp

    temp=fscanf(fidin,'%f\t',[3 inf]);
    [temp1 temp2]=size(temp);
    temp=temp';

    a0=interp1(temp(:,1),temp(:,2),WL,'cubic');
    a1=interp1(temp(:,1),temp(:,3),WL,'cubic');

    fclose(fidin);

    % reading Rrs 

    Rrsraw=interp1(WL_Ls,Rrs_avg,WL);
    
    % solar zenith 
    theta=30; %solar zenith in degree, which is an example here   
    thetaw=asin(sin(theta*PI/180)/n)*180/PI; %solar zenith at subsurface

    % parameter for estimation of shading error 
    s1=1.15+3.15*sin(thetaw/180*PI);
    s2=-1.57;
    s3=5.62*sin(thetaw/180*PI)-0.23;
    s4=-0.5;

    % initial guess
    temp11=Rrsraw(1)/(0.52+1.7*Rrsraw(1)); 
    temp12=Rrsraw(32)/(0.52+1.7*Rrsraw(32));

    P=0.072*(Rrsraw(9)/Rrsraw(32))^1.62;
    G=P;
    S=0.014;
    Y=2.0*(1-1.2*exp(-0.9*temp11/temp12));

    bbp440=30*aw(49)*Rrsraw(49)*((400/440)^Y);

    Y1=0.8*Y;
    Y2=2.0*Y;
    if (Y<0) 
        Y1=0.1;
        Y2=2.0;
    end
    
        x1=P;
        x2=S;
        x3=bbp440;
        x4=Y;
        x0=[x1 x2 x3 x4];

        options=optimset('largescale','on','display','iter','tolx',1e-8,'tolfun',1e-12,'Algorithm','active-set','MaxFunEvals',10000,'MaxIter',10000);
        LB=[0.001;0.008;0.001;Y1];  %lower boundary
        UB=[1;0.03;0.3;Y2];         %upper boundary  
    
        [xx,fval]=fmincon(@optimization1,x0,[],[],[],[],LB,UB,[],options);

        P=xx(1);
        S=xx(2);
        bbp440=xx(3);
        Y=xx(4);

        [ag]=getag(G,S);
        [aph]=getaph(P,a0,a1);
        [bbp]=getbbp(bbp440,Y); 
        [a]=geta(aw,aph,ag);                    %estimated absorption
        [bb]=getbb(bbw,bbp);                    %estimated backscattering

        [rrsw]=getrrsw(bbw,a,bb);
        [rrsdp]=getrrsdp(rrsw,bbp,a,bb);
        [rrs]=getrrs(rrsdp);
        [Rrs]=gettRrs(rrs);
        [shade]=getshade(a,bb,s1,s2,s3,s4);     %estimated shading error
        [Rrss]=getRrss(Rrs,shade);              %simulated Rrs with shading
        [error]=geterror(Rrsraw,Rrss);          %final error
      
    
    % correct shading error

    Rrsc(1:WN)=Rrsraw./(1-shade(1:WN));

    % plot figure
     h=figure(1);
     set(gca,'FontSize',40);
    hold off
    set(gcf,'Units','centimeters')
    set(gcf,'PaperUnits','centimeters')
    set(gcf,'Position',[1 2 35 25]);
    set(gca,'Position',[0.10 0.10 0.8 0.8]);  
    
    hold off
    plot(WL,Rrsc(1:WN),'r-','linewidth',3);
    
    hold on
    
    plot(WL,Rrsraw(1:WN),'b-','linewidth',3);
    plot(WL,Rrss(1:WN),'g-','linewidth',3);
     
     set(gca,'xlim',[WL(1) WL(WN)]);
     set(gca,'XTick',WL(1):50:WL(WN));
     xlabel('\lambda nm');
     ylabel('R_r_s');
     legend('R_r_s corrected','R_r_s measured','R_r_s simulated');
     set(gca,'FontSize',14)
     title([fname{file} ': Shadow Corrected'])
     
    set(gcf,'Color','w')
    export_fig([figureFolder 'rrs_corrected_' fname{file}],'-m3','-painters')
    close all
     
end
